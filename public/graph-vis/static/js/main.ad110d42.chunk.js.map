{"version":3,"sources":["components/Visualizer.jsx","components/Dropdown.jsx","components/Input.jsx","components/Container.jsx","components/Footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Visualizer","key","graph","algo","running","handleRun","edges","numNodes","networkHandler","start","end","useState","network","setNetwork","renderGraph","getNetwork","options","physics","enabled","barnesHut","springLength","springConstant","centralGravity","avoidOverlap","interaction","dragView","hover","zoomView","nodes","shape","size","mass","color","highlight","border","background","manipulation","editNode","nodeData","callback","layout","hierarchical","arrows","to","middle","from","chosen","width","selectionWidth","font","smooth","type","height","events","select","event","arraysEqual","a","b","length","i","dijkstras","startVertex","endVertex","withPathfinding","unselectAll","TreeModel","require","tree","root","parse","id","children","body","data","update","label","setSelection","highlightEdges","fringe","FastPriorityQueue","distTo","Array","fill","Number","MAX_SAFE_INTEGER","add","processNeighbors","neighbor","neighboringEdges","filter","edge","getConnectedEdges","includes","commonEdge","currVertexDist","parseInt","removeOne","x","toString","undefined","oldPos","first","node","model","drop","treePos","addChild","Promise","r","setTimeout","currVertex","peek","neighboringVertices","getConnectedNodes","poll","isEmpty","endPos","shortestPath","getPath","setImmediate","useEffect","Dropdown","handleChange","className","style","pointerEvents","name","onChange","Input","handleInput","display","alignItems","margin","htmlFor","maxLength","defaultValue","Container","setNumNodes","randEdges","Math","round","numChanged","setNumChanged","setStartVertex","setEndVertex","setRunning","alert","edgeState","setEdgeState","setAlgo","makeid","graphKey","setGraphKey","newState","keys","map","e","len","getRandomInt","push","findIndex","setGraph","result","characters","charactersLength","charAt","floor","random","join","min","max","ceil","onClick","preventDefault","target","value","getSelectedNodes","reselect","setOptions","undoVertexStartSelection","undoVertexEndSelection","Footer","fontSize","App","rootElement","document","getElementById","ReactDOM","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","basename","path","component","exact"],"mappings":"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","file":"static/js/main.ad110d42.chunk.js","sourcesContent":["import Graph from \"react-graph-vis\";\r\nimport FastPriorityQueue from \"fastpriorityqueue\";\r\nimport Info from \"./Info\";\r\nimport { useCallback, useState, useEffect, componentDidUpdate } from \"react\";\r\nimport \"./styles/Visualizer.css\";\r\nimport \"./styles/Constants.css\";\r\nimport { render } from \"@testing-library/react\";\r\n\r\n//shift alt F\r\n\r\nconst Visualizer = ({\r\n  key,\r\n  graph,\r\n  algo,\r\n  running,\r\n  handleRun,\r\n  edges,\r\n  numNodes,\r\n  networkHandler,\r\n  start,\r\n  end,\r\n}) => {\r\n  const [network, setNetwork] = useState({});\r\n\r\n  const options = {\r\n    physics: {\r\n      enabled: true,\r\n      barnesHut: {\r\n        springLength: 95,\r\n        springConstant: 0.01,\r\n        centralGravity: 1.5,\r\n        avoidOverlap: 1,\r\n      },\r\n    },\r\n    interaction: {\r\n      dragView: true,\r\n      hover: true,\r\n      zoomView: true,\r\n    },\r\n    nodes: {\r\n      shape: \"circle\",\r\n      size: 15,\r\n      mass: 2.7,\r\n      color: {\r\n        highlight: {\r\n          border: \"#FFA500\",\r\n          background: \"#FFD700\",\r\n        },\r\n      },\r\n    },\r\n    manipulation: {\r\n      enabled: false,\r\n      editNode: function (nodeData, callback) {\r\n        nodeData.color.highlight.background = \"#66CD00\";\r\n        nodeData.color.highlight.border = \"#4A7023\";\r\n        callback(nodeData);\r\n      },\r\n    },\r\n    layout: {\r\n      hierarchical: false,\r\n    },\r\n    edges: {\r\n      arrows: {\r\n        to: {\r\n          enabled: false,\r\n        },\r\n        middle: {\r\n          enabled: false,\r\n        },\r\n        from: {\r\n          enabled: false,\r\n        },\r\n      },\r\n      chosen: true,\r\n      width: 0.5,\r\n      selectionWidth: 3,\r\n      color: {\r\n        highlight: \"#DE6FA1\",\r\n      },\r\n      font: {\r\n        size: 16,\r\n      },\r\n      smooth: {\r\n        enabled: true,\r\n        type: \"continuous\",\r\n      },\r\n    },\r\n    height: \"100%\",\r\n  };\r\n\r\n  const events = {\r\n    select: (event) => {\r\n      var { nodes, edges } = event;\r\n    },\r\n  };\r\n\r\n  const renderGraph = (\r\n    <Graph\r\n      getNetwork={(network) => setNetwork(network)}\r\n      graph={graph}\r\n      options={options}\r\n      events={events}\r\n      key={key}\r\n    />\r\n  );\r\n\r\n  const defaultSettings = {\r\n    id: 0,\r\n    shape: \"circle\",\r\n    size: 15,\r\n    mass: 2.7,\r\n    label: \"\",\r\n    color: {\r\n      highlight: {\r\n        border: \"#FFA500\",\r\n        background: \"#FFD700\",\r\n      },\r\n    },\r\n  };\r\n\r\n  function updateNodeLabel(id, dist) {\r\n    let settings = JSON.parse(JSON.stringify(defaultSettings));\r\n    settings.id = id.toString();\r\n    settings.label = dist.toString();\r\n    return settings;\r\n  }\r\n\r\n  function updateStartNodeLabel(id, dist) {\r\n    let settings = JSON.parse(JSON.stringify(defaultSettings));\r\n    settings.color.background = \"#66CD00\";\r\n    settings.color.border = \"#4A7023\";\r\n    settings.chosen = false;\r\n    settings.id = id.toString();\r\n    settings.label = dist.toString();\r\n    return settings;\r\n  }\r\n\r\n  function updateEndNodeLabel(id, dist) {\r\n    let settings = JSON.parse(JSON.stringify(defaultSettings));\r\n    settings.color.background = \"#ff4c4c\";\r\n    settings.color.border = \"#7f0000\";\r\n    settings.chosen = false;\r\n    settings.id = id.toString();\r\n    settings.label = dist.toString();\r\n    return settings;\r\n  }\r\n\r\n  useEffect(() => {\r\n    networkHandler(network);\r\n    if (running) {\r\n      switch (algo) {\r\n        case \"Dijkstra's\":\r\n          dijkstras(start, null, false);\r\n          break;\r\n        case \"Dijkstra's (with Pathfinding)\":\r\n          dijkstras(start, end, true);\r\n          break;\r\n        case \"A*\":\r\n          A(start, end);\r\n          break;\r\n        case \"Prim's\":\r\n          prims(start);\r\n          break;\r\n        case \"Kruskal's\":\r\n          kruskals();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  });\r\n\r\n  function arraysEqual(a, b) {\r\n    if (a === b) return true;\r\n    if (a == null || b == null) return false;\r\n    if (a.length !== b.length) return false;\r\n\r\n    // If you don't care about the order of the elements inside\r\n    // the array, you should sort both arrays here.\r\n    // Please note that calling sort on an array will modify that array.\r\n    // you might want to clone your array first.\r\n\r\n    for (var i = 0; i < a.length; ++i) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async function dijkstras(startVertex, endVertex, withPathfinding) {\r\n    network.unselectAll();\r\n    //some tree structure to track final path\r\n    var TreeModel = require(\"tree-model\"),\r\n      tree = new TreeModel(),\r\n      root = tree.parse({ id: startVertex, children: [{}] });\r\n\r\n    for (var i = 0; i < numNodes; i++) {\r\n      network.body.data.nodes.update({ id: i, label: \"\" });\r\n    }\r\n    network.setSelection(\r\n      {\r\n        nodes: [startVertex],\r\n      },\r\n      {\r\n        unselectAll: false,\r\n        highlightEdges: false,\r\n      }\r\n    );\r\n\r\n    network.body.data.nodes.update({ id: startVertex, label: \"0\" });\r\n\r\n    const fringe = new FastPriorityQueue(function (a, b) {\r\n      return a[1] < b[1];\r\n    });\r\n\r\n    const distTo = new Array(numNodes).fill(Number.MAX_SAFE_INTEGER);\r\n    distTo[startVertex] = 0;\r\n\r\n    fringe.add([startVertex, 0]);\r\n\r\n    for (let i = 0; i < numNodes - 1; i++) {\r\n      if (i !== startVertex) {\r\n        fringe.add([i, Number.MAX_SAFE_INTEGER]);\r\n      }\r\n    }\r\n\r\n    while (!fringe.isEmpty()) {\r\n      await new Promise((r) => setTimeout(r, 65));\r\n      //&& fringe.peek()[0] !== endVertex\r\n      let currVertex = fringe.peek()[0];\r\n      let currVertexDist = fringe.peek()[1];\r\n      let neighboringVertices = network.getConnectedNodes(currVertex);\r\n      let neighboringEdges = network.getConnectedEdges(currVertex);\r\n      network.setSelection(\r\n        {\r\n          nodes: [currVertex],\r\n        },\r\n        {\r\n          unselectAll: false,\r\n          highlightEdges: false,\r\n        }\r\n      );\r\n      let treePos = root.first(function (node) {\r\n        return node.model.id === currVertex;\r\n      });\r\n      async function processNeighbors(neighbor) {\r\n        let commonEdge = await neighboringEdges.filter((edge) =>\r\n          network.getConnectedEdges(neighbor).includes(edge)\r\n        )[0]; //gives common edge in single-element array\r\n        if (currVertexDist + parseInt(edges[commonEdge]) < distTo[neighbor]) {\r\n          fringe.removeOne((x) => arraysEqual(x, [neighbor, distTo[neighbor]]));\r\n          distTo[neighbor] = currVertexDist + parseInt(edges[commonEdge]);\r\n          fringe.add([neighbor, distTo[neighbor]]);\r\n          network.body.data.nodes.update({\r\n            id: neighbor,\r\n            label: distTo[neighbor].toString(),\r\n          });\r\n          let oldPos = root.first(function (node) {\r\n            return node.model.id === neighbor;\r\n          });\r\n          if (oldPos !== undefined) {\r\n            oldPos.drop();\r\n          }\r\n          treePos.addChild(tree.parse({ id: neighbor, children: [{}] }));\r\n          network.setSelection(\r\n            {\r\n              nodes: [neighbor],\r\n              edges: [commonEdge],\r\n            },\r\n            {\r\n              unselectAll: false,\r\n              highlightEdges: false,\r\n            }\r\n          );\r\n        }\r\n      }\r\n      for (let i = 0; i < neighboringVertices.length; i++) {\r\n        let neighbor = neighboringVertices[i];\r\n        processNeighbors(neighbor);\r\n      }\r\n\r\n      fringe.poll();\r\n    }\r\n    if (withPathfinding) {\r\n      const endPos = root.first(function (node) {\r\n        return node.model.id === endVertex;\r\n      });\r\n      const shortestPath = endPos.getPath();\r\n      network.unselectAll();\r\n      for (let i = 0; i < shortestPath.length - 1; i++) {\r\n        let neighboringEdges = network.getConnectedEdges(\r\n          shortestPath[i].model.id\r\n        );\r\n        let commonEdge = await neighboringEdges.filter((edge) =>\r\n          network.getConnectedEdges(shortestPath[i + 1].model.id).includes(edge)\r\n        )[0];\r\n        network.setSelection(\r\n          {\r\n            nodes: [shortestPath[i].model.id],\r\n            edges: [commonEdge],\r\n          },\r\n          {\r\n            unselectAll: false,\r\n            highlightEdges: false,\r\n          }\r\n        );\r\n        await new Promise((r) => setTimeout(r, 265));\r\n      }\r\n    }\r\n    setImmediate(() => {\r\n      handleRun();\r\n    });\r\n  }\r\n\r\n  function A(startVertex, endVertex) {}\r\n\r\n  function prims(startVertex) {}\r\n\r\n  function kruskals() {}\r\n\r\n  return renderGraph;\r\n};\r\n\r\nexport default Visualizer;\r\n","const Dropdown = ({ handleChange, running }) => {\r\n  return (\r\n    <form\r\n      className=\"select\"\r\n      style={{\r\n        pointerEvents: running ? \"none\" : \"\",\r\n        filter: running ? \"brightness(0.5)\" : \"none\",\r\n      }}\r\n    >\r\n      <select name=\"slct\" id=\"slct\" onChange={handleChange}>\r\n        <option>Dijkstra's</option>\r\n        <option>Dijkstra's (with Pathfinding)</option>\r\n        {/* <option>A*</option>\r\n        <option>Prim's</option>\r\n        <option>Kruskal's</option> */}\r\n      </select>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","import \"./styles/Constants.css\";\r\n\r\nconst Input = ({ handleInput, running }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        margin: \"0 1.1rem 0\",\r\n        pointerEvents: running ? \"none\" : \"\",\r\n        filter: running ? \"brightness(0.5)\" : \"none\",\r\n      }}\r\n    >\r\n      <label htmlFor=\"nodeCount\">Nodes:</label>\r\n      <input\r\n        maxLength=\"2\"\r\n        id=\"nodeCount\"\r\n        onChange={handleInput}\r\n        defaultValue=\"40\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport Visualizer from \"./Visualizer\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport Input from \"./Input\";\r\nimport React, { useState } from \"react\";\r\nimport \"./styles/Container.css\";\r\nimport \"./styles/Constants.css\";\r\n\r\nconst Container = () => {\r\n  const [numNodes, setNumNodes] = useState(40);\r\n  const randEdges = Math.round(numNodes * 0.6);\r\n  const algoSelect = (event) => {\r\n    event.preventDefault();\r\n    if (startVertex !== undefined && startVertex !== null) {\r\n      network.body.nodes[startVertex].options.color.border = \"#2B7CE9\";\r\n      network.body.nodes[startVertex].options.color.background = \"#98C2FC\";\r\n      network.body.nodes[startVertex].options.chosen = true;\r\n    }\r\n    if (endVertex !== undefined && endVertex !== null) {\r\n      network.body.nodes[endVertex].options.color.border = \"#2B7CE9\";\r\n      network.body.nodes[endVertex].options.color.background = \"#98C2FC\";\r\n      network.body.nodes[endVertex].options.chosen = true;\r\n    }\r\n    setStartVertex(null);\r\n    setEndVertex(null);\r\n    for (let i = 0; i < numNodes; i++) {\r\n      network.body.data.nodes.update({ id: i, label: \"\" });\r\n    }\r\n    network.unselectAll();\r\n    setAlgo(event.target.value);\r\n  };\r\n\r\n  // useEffect(() => console.log(\"RENDER\"));\r\n\r\n  const reveal = () => {}; //TODO:\r\n\r\n  const handleInput = (event) => {\r\n    event.preventDefault();\r\n    setNumNodes(parseInt(event.target.value));\r\n    setNumChanged(true);\r\n  };\r\n\r\n  const [numChanged, setNumChanged] = useState(false);\r\n\r\n  const [startVertex, setStartVertex] = useState();\r\n\r\n  const [endVertex, setEndVertex] = useState();\r\n\r\n  const [network, setNetwork] = useState({});\r\n\r\n  const liftNetworkState = (network) => {\r\n    setNetwork(network);\r\n  };\r\n\r\n  const undoVertexStartSelection = () => {\r\n    let reselect = network.getSelectedNodes()[0];\r\n    if (startVertex == null) {\r\n      return;\r\n    }\r\n    network.setSelection(\r\n      {\r\n        nodes: [startVertex],\r\n      },\r\n      {\r\n        unselectAll: true,\r\n        highlightEdges: false,\r\n      }\r\n    );\r\n    network.setOptions({\r\n      manipulation: {\r\n        editNode: function (nodeData, callback) {\r\n          nodeData.color.background = \"#98C2FC\";\r\n          nodeData.color.border = \"#2B7CE9\";\r\n          nodeData.chosen = true;\r\n          callback(nodeData);\r\n        },\r\n      },\r\n    });\r\n    network.editNode();\r\n    network.setSelection(\r\n      {\r\n        nodes: [reselect],\r\n      },\r\n      {\r\n        unselectAll: true,\r\n        highlightEdges: false,\r\n      }\r\n    );\r\n  };\r\n\r\n  const undoVertexEndSelection = () => {\r\n    let reselect = network.getSelectedNodes()[0];\r\n    if (endVertex == null) {\r\n      return;\r\n    }\r\n    network.setSelection(\r\n      {\r\n        nodes: [endVertex],\r\n      },\r\n      {\r\n        unselectAll: true,\r\n        highlightEdges: false,\r\n      }\r\n    );\r\n    network.setOptions({\r\n      manipulation: {\r\n        editNode: function (nodeData, callback) {\r\n          nodeData.color.background = \"#98C2FC\";\r\n          nodeData.color.border = \"#2B7CE9\";\r\n          nodeData.chosen = true;\r\n          callback(nodeData);\r\n        },\r\n      },\r\n    });\r\n    network.editNode();\r\n    network.setSelection(\r\n      {\r\n        nodes: [reselect],\r\n      },\r\n      {\r\n        unselectAll: true,\r\n        highlightEdges: false,\r\n      }\r\n    );\r\n  };\r\n\r\n  const setStart = () => {\r\n    if (network.getSelectedNodes().length === 0) {\r\n      alert(\"Highlight a node first.\");\r\n      return;\r\n    }\r\n    undoVertexStartSelection();\r\n    network.setSelection(\r\n      {\r\n        nodes: [network.getSelectedNodes()[0]],\r\n      },\r\n      {\r\n        unselectAll: true,\r\n        highlightEdges: false,\r\n      }\r\n    );\r\n    setStartVertex(network.getSelectedNodes()[0]);\r\n    network.setOptions({\r\n      manipulation: {\r\n        editNode: function (nodeData, callback) {\r\n          nodeData.color.background = \"#66CD00\";\r\n          nodeData.color.border = \"#4A7023\";\r\n          nodeData.chosen = false;\r\n          callback(nodeData);\r\n        },\r\n      },\r\n    });\r\n    network.editNode();\r\n    network.unselectAll();\r\n  };\r\n\r\n  const setEnd = () => {\r\n    if (network.getSelectedNodes().length === 0) {\r\n      alert(\"Highlight a node first.\");\r\n      return;\r\n    }\r\n    undoVertexEndSelection();\r\n    network.setSelection(\r\n      {\r\n        nodes: [network.getSelectedNodes()[0]],\r\n      },\r\n      {\r\n        unselectAll: true,\r\n        highlightEdges: false,\r\n      }\r\n    );\r\n    network.setOptions({\r\n      manipulation: {\r\n        editNode: function (nodeData, callback) {\r\n          nodeData.color.background = \"#ff4c4c\";\r\n          nodeData.color.border = \"#7f0000\";\r\n          nodeData.chosen = false;\r\n          callback(nodeData);\r\n        },\r\n      },\r\n    });\r\n    setEndVertex(network.getSelectedNodes()[0]);\r\n    network.editNode();\r\n    network.unselectAll();\r\n  };\r\n\r\n  const handleRun = () => {\r\n    if (startVertex == null) {\r\n      alert(\"Choose starting vertex.\");\r\n      return;\r\n    }\r\n    if (algo === \"Dijkstra's (with Pathfinding)\") {\r\n      if (endVertex == null) {\r\n        alert(\"Choose end vertex.\");\r\n        return;\r\n      }\r\n    }\r\n    setRunning(!running);\r\n  };\r\n\r\n  const [edgeState, setEdgeState] = useState({});\r\n\r\n  const shuffle = () => {\r\n    if (numNodes < 4) {\r\n      alert(\"Too few nodes.\");\r\n      return;\r\n    }\r\n    setNumChanged(false);\r\n    setStartVertex(null);\r\n    setEndVertex(null);\r\n    const edges = {};\r\n    setGraph(() => {\r\n      var newState = {\r\n        nodes: Array.from(new Array(numNodes).keys()).map((e) => ({\r\n          id: e,\r\n        })),\r\n        edges: Array.from(new Array(randEdges).keys()).map((e) => {\r\n          var len = getRandomInt(2, 16);\r\n          var id = makeid(10);\r\n          edges[id] = len.toString();\r\n          return {\r\n            from: getRandomInt(0, numNodes),\r\n            to: getRandomInt(0, numNodes),\r\n            label: len.toString(),\r\n            length: len * 20,\r\n            id: id,\r\n          };\r\n        }),\r\n      };\r\n      //ensure connectivity\r\n      for (let i = 0; i < numNodes - 1; i++) {\r\n        let len = getRandomInt(2, 16);\r\n        var id = makeid(10);\r\n        edges[id] = len.toString();\r\n        newState.edges.push({\r\n          from: i,\r\n          to: i + 1,\r\n          label: len.toString(),\r\n          length: len * 20,\r\n          id: id,\r\n        });\r\n      }\r\n\r\n      //no overlapping\r\n      newState.edges = newState.edges.filter((e, i) => {\r\n        return (\r\n          newState.edges.findIndex((x) => {\r\n            return (\r\n              (x.to === e.to && x.from === e.from) ||\r\n              (x.from === e.to && e.from === x.to)\r\n            );\r\n          }) === i\r\n        );\r\n      });\r\n\r\n      //no self-reference\r\n      newState.edges = newState.edges.filter((edge) => edge.to !== edge.from);\r\n\r\n      return newState;\r\n    });\r\n    setEdgeState(edges);\r\n    setGraphKey(makeid(10));\r\n  };\r\n\r\n  const [algo, setAlgo] = useState(\"Dijkstra's\");\r\n\r\n  const [graphKey, setGraphKey] = useState(makeid(10));\r\n\r\n  const [running, setRunning] = useState(false);\r\n\r\n  const [graph, setGraph] = useState(() => {\r\n    const edges = {};\r\n    var newState = {\r\n      nodes: Array.from(new Array(numNodes).keys()).map((e) => ({\r\n        id: e,\r\n      })),\r\n      edges: Array.from(new Array(randEdges).keys()).map((e) => {\r\n        var len = getRandomInt(2, 16);\r\n        var id = makeid(10);\r\n        edges[id] = len.toString();\r\n        return {\r\n          from: getRandomInt(0, numNodes),\r\n          to: getRandomInt(0, numNodes),\r\n          label: len.toString(),\r\n          length: len * 20,\r\n          id: id,\r\n        };\r\n      }),\r\n    };\r\n\r\n    //ensure connectivity\r\n    for (let i = 0; i < numNodes - 1; i++) {\r\n      let len = getRandomInt(2, 16);\r\n      var id = makeid(10);\r\n      edges[id] = len.toString();\r\n      newState.edges.push({\r\n        from: i,\r\n        to: i + 1,\r\n        label: len.toString(),\r\n        length: len * 20,\r\n        id: id,\r\n      });\r\n    }\r\n\r\n    //no overlapping\r\n    newState.edges = newState.edges.filter((e, i) => {\r\n      return (\r\n        newState.edges.findIndex((x) => {\r\n          return (\r\n            (x.to === e.to && x.from === e.from) ||\r\n            (x.from === e.to && e.from === x.to)\r\n          );\r\n        }) === i\r\n      );\r\n    });\r\n\r\n    //no self-reference\r\n    newState.edges = newState.edges.filter((edge) => edge.to !== edge.from);\r\n    setEdgeState(edges);\r\n    return newState;\r\n  });\r\n\r\n  function makeid(length) {\r\n    var result = [];\r\n    var characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      result.push(\r\n        characters.charAt(Math.floor(Math.random() * charactersLength))\r\n      );\r\n    }\r\n    return result.join(\"\");\r\n  }\r\n\r\n  function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n  }\r\n\r\n  const resetLabels = () => {\r\n    if (!running && network.getSelectedNodes().length === 0) {\r\n      for (let i = 0; i < numNodes; i++) {\r\n        network.body.data.nodes.update({ id: i, label: \"\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"header\">\r\n        <a\r\n          className=\"button\"\r\n          onClick={shuffle}\r\n          style={{\r\n            pointerEvents: running ? \"none\" : \"\",\r\n            filter: running ? \"brightness(0.5)\" : \"none\",\r\n          }}\r\n        >\r\n          Generate\r\n        </a>\r\n        <Input handleInput={handleInput} running={running} />\r\n        <a\r\n          className=\"button1\"\r\n          onClick={setStart}\r\n          style={{\r\n            pointerEvents: running || numChanged ? \"none\" : \"\",\r\n            filter: running || numChanged ? \"brightness(0.5)\" : \"none\",\r\n          }}\r\n        >\r\n          Set start vertex\r\n        </a>\r\n        <a\r\n          className=\"button2\"\r\n          onClick={setEnd}\r\n          style={{\r\n            pointerEvents:\r\n              running || numChanged || algo === \"Dijkstra's\" ? \"none\" : \"\",\r\n            filter:\r\n              running || numChanged || algo === \"Dijkstra's\"\r\n                ? \"brightness(0.5)\"\r\n                : \"none\",\r\n          }}\r\n        >\r\n          Set end vertex\r\n        </a>\r\n        <Dropdown handleChange={algoSelect} running={running || numChanged} />\r\n        <a\r\n          className=\"button\"\r\n          onClick={handleRun}\r\n          style={{\r\n            pointerEvents: running || numChanged ? \"none\" : \"\",\r\n            filter: running || numChanged ? \"brightness(0.5)\" : \"none\",\r\n          }}\r\n        >\r\n          Run\r\n        </a>\r\n        {/* <a className=\"button\" onClick={reveal}>\r\n          Detailed runtime info\r\n        </a> */}\r\n        {/* {algo === \"Kruskal's\" ? (\r\n          <h3>WQUPC Object (Disjoint Sets):</h3>\r\n        ) : (\r\n          <h3>Priority Queue (Fringe):</h3>\r\n        )} */}\r\n      </div>\r\n      <div\r\n        style={{\r\n          pointerEvents: running || numChanged ? \"none\" : \"\",\r\n        }}\r\n        onClick={resetLabels}\r\n      >\r\n        <Visualizer\r\n          key={graphKey}\r\n          graph={graph}\r\n          algo={algo}\r\n          running={running}\r\n          handleRun={handleRun}\r\n          edges={edgeState}\r\n          numNodes={numNodes}\r\n          networkHandler={liftNetworkState}\r\n          start={startVertex}\r\n          end={endVertex}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","import \"./styles/Footer.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div id=\"footer\">\r\n      <h3>Graph Traversal Algorithms</h3>\r\n      <h3 style={{ margin: 0, fontSize: \"0.5rem\" }}>© Brandon Wang 2021</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import Container from './components/Container'\nimport Footer from './components/Footer'\nimport './App.css';\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"vis-network/styles/vis-network.css\";\n\nconst App = () => {\n  return(\n      <div id=\"root\">\n        <Container />\n        <Footer />\n      </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <BrowserRouter basename='/graph-vis'>\n      <Route path=\"/\" component={App} exact />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}