{"version":3,"sources":["components/Visualizer.jsx","components/Dropdown.jsx","components/Input.jsx","components/Container.jsx","components/Footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Visualizer","key","graph","algo","running","handleRun","edges","numNodes","networkHandler","start","end","useState","network","setNetwork","renderGraph","getNetwork","options","physics","enabled","barnesHut","springLength","springConstant","centralGravity","avoidOverlap","interaction","dragView","hover","zoomView","nodes","shape","size","mass","color","highlight","border","background","manipulation","editNode","nodeData","callback","layout","hierarchical","arrows","to","middle","from","chosen","width","selectionWidth","font","smooth","type","height","events","select","event","arraysEqual","a","b","length","i","dijkstras","startVertex","endVertex","withPathfinding","unselectAll","TreeModel","require","tree","root","parse","id","children","body","data","update","label","setSelection","highlightEdges","fringe","FastPriorityQueue","distTo","Array","fill","Number","MAX_SAFE_INTEGER","add","processNeighbors","neighbor","neighboringEdges","filter","edge","getConnectedEdges","includes","commonEdge","currVertexDist","parseInt","removeOne","x","toString","undefined","oldPos","first","node","model","drop","treePos","addChild","Promise","r","setTimeout","currVertex","peek","neighboringVertices","getConnectedNodes","poll","isEmpty","endPos","shortestPath","getPath","setImmediate","heuristic","Math","min","map","useEffect","A","Dropdown","handleChange","className","style","pointerEvents","name","onChange","Input","handleInput","display","alignItems","margin","htmlFor","maxLength","defaultValue","Container","setNumNodes","randEdges","round","numChanged","setNumChanged","setStartVertex","setEndVertex","setRunning","alert","edgeState","setEdgeState","setAlgo","makeid","graphKey","setGraphKey","newState","keys","e","len","getRandomInt","push","findIndex","setGraph","result","characters","charactersLength","charAt","floor","random","join","max","ceil","onClick","preventDefault","target","value","getSelectedNodes","reselect","setOptions","undoVertexStartSelection","undoVertexEndSelection","Footer","fontSize","App","rootElement","document","getElementById","ReactDOM","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","basename","path","component","exact"],"mappings":"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","file":"static/js/main.9c991cb3.chunk.js","sourcesContent":["import Graph from \"react-graph-vis\";\nimport FastPriorityQueue from \"fastpriorityqueue\";\nimport Info from \"./Info\";\nimport { useCallback, useState, useEffect, componentDidUpdate } from \"react\";\nimport \"./styles/Visualizer.css\";\nimport \"./styles/Constants.css\";\nimport { render } from \"@testing-library/react\";\n\n//shift alt F\n\nconst Visualizer = ({\n  key,\n  graph,\n  algo,\n  running,\n  handleRun,\n  edges,\n  numNodes,\n  networkHandler,\n  start,\n  end,\n}) => {\n  const [network, setNetwork] = useState({});\n\n  const options = {\n    physics: {\n      enabled: true,\n      barnesHut: {\n        springLength: 95,\n        springConstant: 0.01,\n        centralGravity: 1.5,\n        avoidOverlap: 1,\n      },\n    },\n    interaction: {\n      dragView: true,\n      hover: true,\n      zoomView: true,\n    },\n    nodes: {\n      shape: \"circle\",\n      size: 15,\n      mass: 2.7,\n      color: {\n        highlight: {\n          border: \"#FFA500\",\n          background: \"#FFD700\",\n        },\n      },\n    },\n    manipulation: {\n      enabled: false,\n      editNode: function (nodeData, callback) {\n        nodeData.color.highlight.background = \"#66CD00\";\n        nodeData.color.highlight.border = \"#4A7023\";\n        callback(nodeData);\n      },\n    },\n    layout: {\n      hierarchical: false,\n    },\n    edges: {\n      arrows: {\n        to: {\n          enabled: false,\n        },\n        middle: {\n          enabled: false,\n        },\n        from: {\n          enabled: false,\n        },\n      },\n      chosen: true,\n      width: 0.5,\n      selectionWidth: 3,\n      color: {\n        highlight: \"#DE6FA1\",\n      },\n      font: {\n        size: 16,\n      },\n      smooth: {\n        enabled: true,\n        type: \"continuous\",\n      },\n    },\n    height: \"100%\",\n  };\n\n  const events = {\n    select: (event) => {\n      var { nodes, edges } = event;\n    },\n  };\n\n  const renderGraph = (\n    <Graph\n      getNetwork={(network) => setNetwork(network)}\n      graph={graph}\n      options={options}\n      events={events}\n      key={key}\n    />\n  );\n\n  const defaultSettings = {\n    id: 0,\n    shape: \"circle\",\n    size: 15,\n    mass: 2.7,\n    label: \"\",\n    color: {\n      highlight: {\n        border: \"#FFA500\",\n        background: \"#FFD700\",\n      },\n    },\n  };\n\n  function updateNodeLabel(id, dist) {\n    let settings = JSON.parse(JSON.stringify(defaultSettings));\n    settings.id = id.toString();\n    settings.label = dist.toString();\n    return settings;\n  }\n\n  function updateStartNodeLabel(id, dist) {\n    let settings = JSON.parse(JSON.stringify(defaultSettings));\n    settings.color.background = \"#66CD00\";\n    settings.color.border = \"#4A7023\";\n    settings.chosen = false;\n    settings.id = id.toString();\n    settings.label = dist.toString();\n    return settings;\n  }\n\n  function updateEndNodeLabel(id, dist) {\n    let settings = JSON.parse(JSON.stringify(defaultSettings));\n    settings.color.background = \"#ff4c4c\";\n    settings.color.border = \"#7f0000\";\n    settings.chosen = false;\n    settings.id = id.toString();\n    settings.label = dist.toString();\n    return settings;\n  }\n\n  useEffect(() => {\n    networkHandler(network);\n    if (running) {\n      switch (algo) {\n        case \"Dijkstra's\":\n          dijkstras(start, null, false);\n          break;\n        case \"Dijkstra's (with Pathfinding)\":\n          dijkstras(start, end, true);\n          break;\n        case \"A*\":\n          A(start, end);\n          break;\n        case \"Prim's (WIP)\":\n          prims(start);\n          break;\n        case \"Kruskal's (WIP)\":\n          kruskals();\n          break;\n        default:\n          break;\n      }\n    }\n  });\n\n  function arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length !== b.length) return false;\n\n    // If you don't care about the order of the elements inside\n    // the array, you should sort both arrays here.\n    // Please note that calling sort on an array will modify that array.\n    // you might want to clone your array first.\n\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n\n  async function dijkstras(startVertex, endVertex, withPathfinding) {\n    network.unselectAll();\n    //some tree structure to track final path\n    var TreeModel = require(\"tree-model\"),\n      tree = new TreeModel(),\n      root = tree.parse({ id: startVertex, children: [{}] });\n\n    for (var i = 0; i < numNodes; i++) {\n      network.body.data.nodes.update({ id: i, label: \"\" });\n    }\n    network.setSelection(\n      {\n        nodes: [startVertex],\n      },\n      {\n        unselectAll: false,\n        highlightEdges: false,\n      }\n    );\n\n    network.body.data.nodes.update({ id: startVertex, label: \"0\" });\n\n    const fringe = new FastPriorityQueue(function (a, b) {\n      return a[1] < b[1];\n    });\n\n    const distTo = new Array(numNodes).fill(Number.MAX_SAFE_INTEGER);\n    distTo[startVertex] = 0;\n\n    fringe.add([startVertex, 0]);\n\n    for (let i = 0; i < numNodes - 1; i++) {\n      if (i !== startVertex) {\n        fringe.add([i, Number.MAX_SAFE_INTEGER]);\n      }\n    }\n\n    while (!fringe.isEmpty()) {\n      await new Promise((r) => setTimeout(r, 65));\n      //&& fringe.peek()[0] !== endVertex\n      let currVertex = fringe.peek()[0];\n      let currVertexDist = fringe.peek()[1];\n      let neighboringVertices = network.getConnectedNodes(currVertex);\n      let neighboringEdges = network.getConnectedEdges(currVertex);\n      network.setSelection(\n        {\n          nodes: [currVertex],\n        },\n        {\n          unselectAll: false,\n          highlightEdges: false,\n        }\n      );\n      let treePos = root.first(function (node) {\n        return node.model.id === currVertex;\n      });\n      async function processNeighbors(neighbor) {\n        let commonEdge = await neighboringEdges.filter((edge) =>\n          network.getConnectedEdges(neighbor).includes(edge)\n        )[0]; //gives common edge in single-element array\n        if (currVertexDist + parseInt(edges[commonEdge]) < distTo[neighbor]) {\n          fringe.removeOne((x) => arraysEqual(x, [neighbor, distTo[neighbor]]));\n          distTo[neighbor] = currVertexDist + parseInt(edges[commonEdge]);\n          fringe.add([neighbor, distTo[neighbor]]);\n          network.body.data.nodes.update({\n            id: neighbor,\n            label: distTo[neighbor].toString(),\n          });\n          let oldPos = root.first(function (node) {\n            return node.model.id === neighbor;\n          });\n          if (oldPos !== undefined) {\n            oldPos.drop();\n          }\n          treePos.addChild(tree.parse({ id: neighbor, children: [{}] }));\n          network.setSelection(\n            {\n              nodes: [neighbor],\n              edges: [commonEdge],\n            },\n            {\n              unselectAll: false,\n              highlightEdges: false,\n            }\n          );\n        }\n      }\n      for (let i = 0; i < neighboringVertices.length; i++) {\n        let neighbor = neighboringVertices[i];\n        processNeighbors(neighbor);\n      }\n\n      fringe.poll();\n    }\n    if (withPathfinding) {\n      const endPos = root.first(function (node) {\n        return node.model.id === endVertex;\n      });\n      const shortestPath = endPos.getPath();\n      network.unselectAll();\n      for (let i = 0; i < shortestPath.length - 1; i++) {\n        let neighboringEdges = network.getConnectedEdges(\n          shortestPath[i].model.id\n        );\n        let commonEdge = await neighboringEdges.filter((edge) =>\n          network.getConnectedEdges(shortestPath[i + 1].model.id).includes(edge)\n        )[0];\n        network.setSelection(\n          {\n            nodes: [shortestPath[i].model.id],\n            edges: [commonEdge],\n          },\n          {\n            unselectAll: false,\n            highlightEdges: false,\n          }\n        );\n        await new Promise((r) => setTimeout(r, 265));\n      }\n    }\n    setImmediate(() => {\n      handleRun();\n    });\n  }\n\n  async function A(startVertex, endVertex) {\n    network.unselectAll();\n    //some tree structure to track final path\n    const heuristic = (neighboringEdges) => {\n      return Math.min(...neighboringEdges.map((edge) => parseInt(edges[edge])));\n    };\n\n    var TreeModel = require(\"tree-model\"),\n      tree = new TreeModel(),\n      root = tree.parse({ id: startVertex, children: [{}] });\n\n    for (var i = 0; i < numNodes; i++) {\n      network.body.data.nodes.update({ id: i, label: \"\" });\n    }\n    network.setSelection(\n      {\n        nodes: [startVertex],\n      },\n      {\n        unselectAll: false,\n        highlightEdges: false,\n      }\n    );\n\n    network.body.data.nodes.update({ id: startVertex, label: \"0\" });\n\n    const fringe = new FastPriorityQueue(function (a, b) {\n      return a[1] < b[1];\n    });\n\n    const distTo = new Array(numNodes).fill(Number.MAX_SAFE_INTEGER);\n    distTo[startVertex] = 0;\n\n    fringe.add([startVertex, 0]);\n\n    for (let i = 0; i < numNodes - 1; i++) {\n      if (i !== startVertex) {\n        fringe.add([i, Number.MAX_SAFE_INTEGER]);\n      }\n    }\n\n    while (!fringe.isEmpty()) {\n      await new Promise((r) => setTimeout(r, 65));\n      let currVertex = fringe.peek()[0];\n      let currVertexDist = fringe.peek()[1];\n      let neighboringVertices = network.getConnectedNodes(currVertex);\n      let neighboringEdges = network.getConnectedEdges(currVertex);\n      network.setSelection(\n        {\n          nodes: [currVertex],\n        },\n        {\n          unselectAll: false,\n          highlightEdges: false,\n        }\n      );\n      let treePos = root.first(function (node) {\n        return node.model.id === currVertex;\n      });\n      if (currVertex === endVertex) {\n        break;\n      }\n      async function processNeighbors(neighbor) {\n        let commonEdge = await neighboringEdges.filter((edge) =>\n          network.getConnectedEdges(neighbor).includes(edge)\n        )[0]; //gives common edge in single-element array\n        if (currVertexDist + parseInt(edges[commonEdge]) < distTo[neighbor]) {\n          fringe.removeOne((x) => arraysEqual(x, [neighbor, distTo[neighbor]]));\n          distTo[neighbor] = currVertexDist + parseInt(edges[commonEdge]);\n          fringe.add([\n            neighbor,\n            distTo[neighbor] + heuristic(neighboringEdges),\n          ]);\n          network.body.data.nodes.update({\n            id: neighbor,\n            label: distTo[neighbor].toString(),\n          });\n          let oldPos = root.first(function (node) {\n            return node.model.id === neighbor;\n          });\n          if (oldPos !== undefined) {\n            oldPos.drop();\n          }\n          treePos.addChild(tree.parse({ id: neighbor, children: [{}] }));\n          network.setSelection(\n            {\n              nodes: [neighbor],\n              edges: [commonEdge],\n            },\n            {\n              unselectAll: false,\n              highlightEdges: false,\n            }\n          );\n        }\n      }\n      for (let i = 0; i < neighboringVertices.length; i++) {\n        let neighbor = neighboringVertices[i];\n        processNeighbors(neighbor);\n      }\n      fringe.poll();\n    }\n    const endPos = root.first(function (node) {\n      return node.model.id === endVertex;\n    });\n    const shortestPath = endPos.getPath();\n    network.unselectAll();\n    for (let i = 0; i < shortestPath.length - 1; i++) {\n      let neighboringEdges = network.getConnectedEdges(\n        shortestPath[i].model.id\n      );\n      let commonEdge = await neighboringEdges.filter((edge) =>\n        network.getConnectedEdges(shortestPath[i + 1].model.id).includes(edge)\n      )[0];\n      network.setSelection(\n        {\n          nodes: [shortestPath[i].model.id],\n          edges: [commonEdge],\n        },\n        {\n          unselectAll: false,\n          highlightEdges: false,\n        }\n      );\n      await new Promise((r) => setTimeout(r, 265));\n    }\n    setImmediate(() => {\n      handleRun();\n    });\n  }\n\n  function prims(startVertex) {\n    network.unselectAll();\n    setImmediate(() => {\n      handleRun();\n    });\n  }\n\n  function kruskals() {\n    network.unselectAll();\n    setImmediate(() => {\n      handleRun();\n    });\n  }\n\n  return renderGraph;\n};\n\nexport default Visualizer;\n","const Dropdown = ({ handleChange, running }) => {\n  return (\n    <form\n      className=\"select\"\n      style={{\n        pointerEvents: running ? \"none\" : \"\",\n        filter: running ? \"brightness(0.5)\" : \"none\",\n      }}\n    >\n      <select name=\"slct\" id=\"slct\" onChange={handleChange}>\n        <option>Dijkstra's</option>\n        <option>Dijkstra's (with Pathfinding)</option>\n        <option>A*</option>\n        <option>Prim's (WIP)</option>\n        <option>Kruskal's (WIP)</option>\n      </select>\n    </form>\n  );\n};\n\nexport default Dropdown;\n","import \"./styles/Constants.css\";\n\nconst Input = ({ handleInput, running }) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        margin: \"0 1.1rem 0\",\n        pointerEvents: running ? \"none\" : \"\",\n        filter: running ? \"brightness(0.5)\" : \"none\",\n      }}\n    >\n      <label htmlFor=\"nodeCount\">Nodes:</label>\n      <input\n        maxLength=\"2\"\n        id=\"nodeCount\"\n        onChange={handleInput}\n        defaultValue=\"40\"\n      />\n    </div>\n  );\n};\n\nexport default Input;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport Visualizer from \"./Visualizer\";\nimport Dropdown from \"./Dropdown\";\nimport Input from \"./Input\";\nimport React, { useState } from \"react\";\nimport \"./styles/Container.css\";\nimport \"./styles/Constants.css\";\n\nconst Container = () => {\n  const [numNodes, setNumNodes] = useState(40);\n  const randEdges = Math.round(numNodes * 0.6);\n  const algoSelect = (event) => {\n    event.preventDefault();\n    if (startVertex !== undefined && startVertex !== null) {\n      network.body.nodes[startVertex].options.color.border = \"#2B7CE9\";\n      network.body.nodes[startVertex].options.color.background = \"#98C2FC\";\n      network.body.nodes[startVertex].options.chosen = true;\n    }\n    if (endVertex !== undefined && endVertex !== null) {\n      network.body.nodes[endVertex].options.color.border = \"#2B7CE9\";\n      network.body.nodes[endVertex].options.color.background = \"#98C2FC\";\n      network.body.nodes[endVertex].options.chosen = true;\n    }\n    setStartVertex(null);\n    setEndVertex(null);\n    for (let i = 0; i < numNodes; i++) {\n      network.body.data.nodes.update({ id: i, label: \"\" });\n    }\n    network.unselectAll();\n    setAlgo(event.target.value);\n  };\n\n  // useEffect(() => console.log(\"RENDER\"));\n\n  const reveal = () => {}; //TODO:\n\n  const handleInput = (event) => {\n    event.preventDefault();\n    setNumNodes(parseInt(event.target.value));\n    setNumChanged(true);\n  };\n\n  const [numChanged, setNumChanged] = useState(false);\n\n  const [startVertex, setStartVertex] = useState();\n\n  const [endVertex, setEndVertex] = useState();\n\n  const [network, setNetwork] = useState({});\n\n  const liftNetworkState = (network) => {\n    setNetwork(network);\n  };\n\n  const undoVertexStartSelection = () => {\n    let reselect = network.getSelectedNodes()[0];\n    if (startVertex == null) {\n      return;\n    }\n    network.setSelection(\n      {\n        nodes: [startVertex],\n      },\n      {\n        unselectAll: true,\n        highlightEdges: false,\n      }\n    );\n    network.setOptions({\n      manipulation: {\n        editNode: function (nodeData, callback) {\n          nodeData.color.background = \"#98C2FC\";\n          nodeData.color.border = \"#2B7CE9\";\n          nodeData.chosen = true;\n          callback(nodeData);\n        },\n      },\n    });\n    network.editNode();\n    network.setSelection(\n      {\n        nodes: [reselect],\n      },\n      {\n        unselectAll: true,\n        highlightEdges: false,\n      }\n    );\n  };\n\n  const undoVertexEndSelection = () => {\n    let reselect = network.getSelectedNodes()[0];\n    if (endVertex == null) {\n      return;\n    }\n    network.setSelection(\n      {\n        nodes: [endVertex],\n      },\n      {\n        unselectAll: true,\n        highlightEdges: false,\n      }\n    );\n    network.setOptions({\n      manipulation: {\n        editNode: function (nodeData, callback) {\n          nodeData.color.background = \"#98C2FC\";\n          nodeData.color.border = \"#2B7CE9\";\n          nodeData.chosen = true;\n          callback(nodeData);\n        },\n      },\n    });\n    network.editNode();\n    network.setSelection(\n      {\n        nodes: [reselect],\n      },\n      {\n        unselectAll: true,\n        highlightEdges: false,\n      }\n    );\n  };\n\n  const setStart = () => {\n    if (network.getSelectedNodes().length === 0) {\n      alert(\"Highlight a node first.\");\n      return;\n    }\n    undoVertexStartSelection();\n    network.setSelection(\n      {\n        nodes: [network.getSelectedNodes()[0]],\n      },\n      {\n        unselectAll: true,\n        highlightEdges: false,\n      }\n    );\n    setStartVertex(network.getSelectedNodes()[0]);\n    network.setOptions({\n      manipulation: {\n        editNode: function (nodeData, callback) {\n          nodeData.color.background = \"#66CD00\";\n          nodeData.color.border = \"#4A7023\";\n          nodeData.chosen = false;\n          callback(nodeData);\n        },\n      },\n    });\n    network.editNode();\n    network.unselectAll();\n  };\n\n  const setEnd = () => {\n    if (network.getSelectedNodes().length === 0) {\n      alert(\"Highlight a node first.\");\n      return;\n    }\n    undoVertexEndSelection();\n    network.setSelection(\n      {\n        nodes: [network.getSelectedNodes()[0]],\n      },\n      {\n        unselectAll: true,\n        highlightEdges: false,\n      }\n    );\n    network.setOptions({\n      manipulation: {\n        editNode: function (nodeData, callback) {\n          nodeData.color.background = \"#ff4c4c\";\n          nodeData.color.border = \"#7f0000\";\n          nodeData.chosen = false;\n          callback(nodeData);\n        },\n      },\n    });\n    setEndVertex(network.getSelectedNodes()[0]);\n    network.editNode();\n    network.unselectAll();\n  };\n\n  const handleRun = () => {\n    if (startVertex == null) {\n      alert(\"Choose starting vertex.\");\n      return;\n    }\n    if (algo === \"Dijkstra's (with Pathfinding)\") {\n      if (endVertex == null) {\n        alert(\"Choose end vertex.\");\n        return;\n      }\n    }\n    setRunning(!running);\n  };\n\n  const [edgeState, setEdgeState] = useState({});\n\n  const shuffle = () => {\n    if (numNodes < 4) {\n      alert(\"Too few nodes.\");\n      return;\n    }\n    setNumChanged(false);\n    setStartVertex(null);\n    setEndVertex(null);\n    const edges = {};\n    setGraph(() => {\n      var newState = {\n        nodes: Array.from(new Array(numNodes).keys()).map((e) => ({\n          id: e,\n        })),\n        edges: Array.from(new Array(randEdges).keys()).map((e) => {\n          var len = getRandomInt(2, 16);\n          var id = makeid(10);\n          edges[id] = len.toString();\n          return {\n            from: getRandomInt(0, numNodes),\n            to: getRandomInt(0, numNodes),\n            label: len.toString(),\n            length: len * 20,\n            id: id,\n          };\n        }),\n      };\n      //ensure connectivity\n      for (let i = 0; i < numNodes - 1; i++) {\n        let len = getRandomInt(2, 16);\n        var id = makeid(10);\n        edges[id] = len.toString();\n        newState.edges.push({\n          from: i,\n          to: i + 1,\n          label: len.toString(),\n          length: len * 20,\n          id: id,\n        });\n      }\n\n      //no overlapping\n      newState.edges = newState.edges.filter((e, i) => {\n        return (\n          newState.edges.findIndex((x) => {\n            return (\n              (x.to === e.to && x.from === e.from) ||\n              (x.from === e.to && e.from === x.to)\n            );\n          }) === i\n        );\n      });\n\n      //no self-reference\n      newState.edges = newState.edges.filter((edge) => edge.to !== edge.from);\n\n      return newState;\n    });\n    setEdgeState(edges);\n    setGraphKey(makeid(10));\n  };\n\n  const [algo, setAlgo] = useState(\"Dijkstra's\");\n\n  const [graphKey, setGraphKey] = useState(makeid(10));\n\n  const [running, setRunning] = useState(false);\n\n  const [graph, setGraph] = useState(() => {\n    const edges = {};\n    var newState = {\n      nodes: Array.from(new Array(numNodes).keys()).map((e) => ({\n        id: e,\n      })),\n      edges: Array.from(new Array(randEdges).keys()).map((e) => {\n        var len = getRandomInt(2, 16);\n        var id = makeid(10);\n        edges[id] = len.toString();\n        return {\n          from: getRandomInt(0, numNodes),\n          to: getRandomInt(0, numNodes),\n          label: len.toString(),\n          length: len * 20,\n          id: id,\n        };\n      }),\n    };\n\n    //ensure connectivity\n    for (let i = 0; i < numNodes - 1; i++) {\n      let len = getRandomInt(2, 16);\n      var id = makeid(10);\n      edges[id] = len.toString();\n      newState.edges.push({\n        from: i,\n        to: i + 1,\n        label: len.toString(),\n        length: len * 20,\n        id: id,\n      });\n    }\n\n    //no overlapping\n    newState.edges = newState.edges.filter((e, i) => {\n      return (\n        newState.edges.findIndex((x) => {\n          return (\n            (x.to === e.to && x.from === e.from) ||\n            (x.from === e.to && e.from === x.to)\n          );\n        }) === i\n      );\n    });\n\n    //no self-reference\n    newState.edges = newState.edges.filter((edge) => edge.to !== edge.from);\n    setEdgeState(edges);\n    return newState;\n  });\n\n  function makeid(length) {\n    var result = [];\n    var characters =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n      result.push(\n        characters.charAt(Math.floor(Math.random() * charactersLength))\n      );\n    }\n    return result.join(\"\");\n  }\n\n  function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n  }\n\n  const resetLabels = () => {\n    if (!running && network.getSelectedNodes().length === 0) {\n      for (let i = 0; i < numNodes; i++) {\n        network.body.data.nodes.update({ id: i, label: \"\" });\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div id=\"header\">\n        <a\n          className=\"button\"\n          onClick={shuffle}\n          style={{\n            pointerEvents: running ? \"none\" : \"\",\n            filter: running ? \"brightness(0.5)\" : \"none\",\n          }}\n        >\n          Generate\n        </a>\n        <Input handleInput={handleInput} running={running} />\n        <a\n          className=\"button1\"\n          onClick={setStart}\n          style={{\n            pointerEvents: running || numChanged ? \"none\" : \"\",\n            filter: running || numChanged ? \"brightness(0.5)\" : \"none\",\n          }}\n        >\n          Set start vertex\n        </a>\n        <a\n          className=\"button2\"\n          onClick={setEnd}\n          style={{\n            pointerEvents:\n              running || numChanged || algo === \"Dijkstra's\" ? \"none\" : \"\",\n            filter:\n              running || numChanged || algo === \"Dijkstra's\"\n                ? \"brightness(0.5)\"\n                : \"none\",\n          }}\n        >\n          Set end vertex\n        </a>\n        <Dropdown handleChange={algoSelect} running={running || numChanged} />\n        <a\n          className=\"button\"\n          onClick={handleRun}\n          style={{\n            pointerEvents: running || numChanged ? \"none\" : \"\",\n            filter: running || numChanged ? \"brightness(0.5)\" : \"none\",\n          }}\n        >\n          Run\n        </a>\n        {/* <a className=\"button\" onClick={reveal}>\n          Detailed runtime info\n        </a> */}\n        {/* {algo === \"Kruskal's\" ? (\n          <h3>WQUPC Object (Disjoint Sets):</h3>\n        ) : (\n          <h3>Priority Queue (Fringe):</h3>\n        )} */}\n      </div>\n      <div\n        style={{\n          pointerEvents: running || numChanged ? \"none\" : \"\",\n        }}\n        onClick={resetLabels}\n      >\n        <Visualizer\n          key={graphKey}\n          graph={graph}\n          algo={algo}\n          running={running}\n          handleRun={handleRun}\n          edges={edgeState}\n          numNodes={numNodes}\n          networkHandler={liftNetworkState}\n          start={startVertex}\n          end={endVertex}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Container;\n","import \"./styles/Footer.css\";\n\nconst Footer = () => {\n  return (\n    <div id=\"footer\">\n      <h3>Graph Traversal Algorithms</h3>\n      <h3 style={{ margin: 0, fontSize: \"0.5rem\" }}>© Brandon Wang 2021</h3>\n    </div>\n  );\n};\n\nexport default Footer;\n","import Container from './components/Container'\nimport Footer from './components/Footer'\nimport './App.css';\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"vis-network/styles/vis-network.css\";\n\nconst App = () => {\n  return(\n      <div id=\"root\">\n        <Container />\n        <Footer />\n      </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <BrowserRouter basename='/graph-vis'>\n      <Route path=\"/\" component={App} exact />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}